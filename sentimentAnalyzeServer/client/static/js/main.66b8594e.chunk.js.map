{"version":3,"sources":["App.js","EmotionTable.js","reportWebVitals.js","index.js"],"names":["App","React","Component","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","createTableHeader","emotionHeader","className","estimateHeader","createElement","key","createEmotionTable","data","console","log","tableHeader","tableRows","index","Object","keys","forEach","emotionClass","estimateClass","emotionCell","estimateCell","rowKey","tableRow","push","tableBody","renderOutput","input_mode","setState","sendForSentimentAnalysis","url","window","location","hostname","encodeURIComponent","document","getElementById","value","trim","fetch","then","response","JSON","stringify","json","label","output","color","style","fontSize","sendForEmotionAnalysis","table","onClick","this","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66b8594e.chunk.js","sourcesContent":["import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  /*\n  We are setting the component as a state named innercomp.\n  When this state is accessed, the HTML that is set as the\n  value of the state, will be returned. The initial input mode\n  is set to text\n  */\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        };\n\n\n  createTableHeader = () => {\n    let emotionHeader   = <th key=\"emotionHeader\" className=\"rightBorder\">Emotion</th>;\n    let estimateHeader  = <th key=\"estimateHeader\">Estimate</th>;\n    let tableHeaderRow  = React.createElement('tr', { key: 'tableHeader', className: \"emotionHeader\" }, [emotionHeader, estimateHeader]);\n    return tableHeaderRow;\n  }\n\n\n  createEmotionTable = (data) => {\n    console.log(\"Iterating over each data field\");\n    let tableHeader = this.createTableHeader();\n    var tableRows   = [];\n    let index       = 0;\n    Object.keys(data).forEach( function(key) {\n      index             = index + 1;\n      let emotionClass  = \"rightBorder \" + (index % 2 === 0 ? \"even\" : \"odd\");\n      let estimateClass = (index % 2 === 0 ? \"even\" : \"odd\");\n      console.log(\"Key is [\" + key + \"]. Associated value is [\" + data[key] + \"]\");\n      let emotionCell   = <td key={key} className={emotionClass}>{key}</td>;\n      let estimateCell  = <td key={\"estimate_\" + key}  className={estimateClass}>{data[key]}</td>;\n      let rowKey        = \"row_\" + key;\n      let tableRow      = React.createElement('tr', { key: rowKey, className: \"emotionRow\" }, [emotionCell, estimateCell]);\n      tableRows.push(tableRow);\n\n    } );\n    console.log(\"Completed iterating over each data fied\");\n    var tableBody     = React.createElement(\"tbody\", { key: \"tableBody\" }, [tableHeader, tableRows]);\n    var tableToReturn = React.createElement(\"table\", { key: \"emotionTable\", className: \"emotionTable\" }, [tableBody]);\n    return tableToReturn;\n  }\n\n\n  /*\n  This method returns the component based on what the input mode is.\n  If the requested input mode is \"text\" it returns a textbox with 4 rows.\n  If the requested input mode is \"url\" it returns a textbox with 1 row.\n  */\n\n  renderOutput = (input_mode) => {\n    let rows = 1\n    let mode = \"url\"\n    //If the input mode is text make it 4 lines\n    if(input_mode === \"text\"){\n      mode = \"text\"\n      rows = 4\n    }\n      this.setState({innercomp:<textarea rows={rows} cols=\"50\" id=\"textinput\"/>,\n      mode: mode,\n      sentimentOutput:[],\n      sentiment:true\n      });\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    //let url = \".\";\n    let url = \"http://\" + window.location.hostname + \":8080\";\n    let mode = this.state.mode;\n    url = url + \"/\" + mode + \"/sentiment?\" + mode + \"=\" + encodeURIComponent(document.getElementById(\"textinput\").value.trim());\n    console.log('URL to send request is [' + url + ']');\n    fetch(url).then( (response) => {\n        console.log(\"Reading response\");\n        console.log(response);\n        console.log(\"Stringified JSON response:\\n\" + JSON.stringify(response, null, 4));\n        response.json().then( (data) => {\n          console.log(\"Setting state\");\n          this.setState({sentimentOutput:data.label});\n          let output = data.label;\n          let color = \"white\";\n          switch(output) {\n            case \"positive\": color = \"lightgreen\"; break;\n            case \"negative\": color = \"red\"; break;\n            default: color = \"#fff907\";\n          }\n          output = <div style={{color:color, fontSize:20}} className=\"sentimentResult\">Sentiment is {output}</div>;\n          this.setState( {sentimentOutput:output} );\n      })});\n  }\n\n  sendForEmotionAnalysis = () => {\n\n    this.setState({sentiment:false});\n    //let url = \".\";\n    let url = \"http://\" + window.location.hostname + \":8080\";\n    let mode = this.state.mode;\n    url = url + \"/\" + mode + \"/emotion?\"+ mode + \"=\" + encodeURIComponent(document.getElementById(\"textinput\").value.trim());\n\n    fetch(url).then( (response) => {\n      response.json().then( (data) => {\n        console.log(\"Printing emotion data here\");\n        console.log( JSON.stringify(data, null, 4) );\n        let table = this.createEmotionTable(data);\n        this.setState( {sentimentOutput:table} );\n      }\n    )});\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={()=>{this.renderOutput('text')}}>Text</button>\n        <button className=\"btn btn-dark\" onClick={()=>{this.renderOutput('url')}}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      //Returns the emotions as an HTML table\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n              /*Write code to use the .map method that you worked on in the \n              Hands-on React lab to extract the emotions. If you are stuck,\n              please click the instructions to see how to implement a map*/\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}